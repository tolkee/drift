/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignOutRouteImport } from './routes/sign-out'
import { Route as SignInRouteImport } from './routes/sign-in'
import { Route as OauthCallbackRouteImport } from './routes/oauth-callback'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as AuthedIndexRouteImport } from './routes/_authed/index'
import { Route as AuthedProjectsIndexRouteImport } from './routes/_authed/projects/index'
import { Route as AuthedProjectsSlugRouteImport } from './routes/_authed/projects/$slug'

const SignOutRoute = SignOutRouteImport.update({
  id: '/sign-out',
  path: '/sign-out',
  getParentRoute: () => rootRouteImport,
} as any)
const SignInRoute = SignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const OauthCallbackRoute = OauthCallbackRouteImport.update({
  id: '/oauth-callback',
  path: '/oauth-callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedProjectsIndexRoute = AuthedProjectsIndexRouteImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedProjectsSlugRoute = AuthedProjectsSlugRouteImport.update({
  id: '/projects/$slug',
  path: '/projects/$slug',
  getParentRoute: () => AuthedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/oauth-callback': typeof OauthCallbackRoute
  '/sign-in': typeof SignInRoute
  '/sign-out': typeof SignOutRoute
  '/': typeof AuthedIndexRoute
  '/projects/$slug': typeof AuthedProjectsSlugRoute
  '/projects': typeof AuthedProjectsIndexRoute
}
export interface FileRoutesByTo {
  '/oauth-callback': typeof OauthCallbackRoute
  '/sign-in': typeof SignInRoute
  '/sign-out': typeof SignOutRoute
  '/': typeof AuthedIndexRoute
  '/projects/$slug': typeof AuthedProjectsSlugRoute
  '/projects': typeof AuthedProjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/oauth-callback': typeof OauthCallbackRoute
  '/sign-in': typeof SignInRoute
  '/sign-out': typeof SignOutRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/projects/$slug': typeof AuthedProjectsSlugRoute
  '/_authed/projects/': typeof AuthedProjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/oauth-callback'
    | '/sign-in'
    | '/sign-out'
    | '/'
    | '/projects/$slug'
    | '/projects'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/oauth-callback'
    | '/sign-in'
    | '/sign-out'
    | '/'
    | '/projects/$slug'
    | '/projects'
  id:
    | '__root__'
    | '/_authed'
    | '/oauth-callback'
    | '/sign-in'
    | '/sign-out'
    | '/_authed/'
    | '/_authed/projects/$slug'
    | '/_authed/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  OauthCallbackRoute: typeof OauthCallbackRoute
  SignInRoute: typeof SignInRoute
  SignOutRoute: typeof SignOutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-out': {
      id: '/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof SignOutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/oauth-callback': {
      id: '/oauth-callback'
      path: '/oauth-callback'
      fullPath: '/oauth-callback'
      preLoaderRoute: typeof OauthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/projects/': {
      id: '/_authed/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthedProjectsIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/projects/$slug': {
      id: '/_authed/projects/$slug'
      path: '/projects/$slug'
      fullPath: '/projects/$slug'
      preLoaderRoute: typeof AuthedProjectsSlugRouteImport
      parentRoute: typeof AuthedRoute
    }
  }
}

interface AuthedRouteChildren {
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedProjectsSlugRoute: typeof AuthedProjectsSlugRoute
  AuthedProjectsIndexRoute: typeof AuthedProjectsIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedProjectsSlugRoute: AuthedProjectsSlugRoute,
  AuthedProjectsIndexRoute: AuthedProjectsIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  OauthCallbackRoute: OauthCallbackRoute,
  SignInRoute: SignInRoute,
  SignOutRoute: SignOutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
